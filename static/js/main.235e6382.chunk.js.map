{"version":3,"sources":["App.module.scss","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","header","content","inputGroup","username","email","receiptList","text","btnGroup","sendBtn","clearBtn","footer","Header","Content","Footer","API_URL","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","openNotificationWithIcon","type","user","message","description","concat","notification","validateFields","_this$state","state","test","es_message","error","handleInputChange","key","e","setState","defineProperty","target","value","handleAddClick","_this$state2","receipts","push","status","handleRemoveReceipt","index","splice","handleSendSubmit","map","item","loading","fetch","method","headers","Content-Type","body","JSON","stringify","then","response","json","_ref","data","statusCode","catch","handleClearSubmit","renderReceipt","react_default","a","createElement","list","Item","actions","onClick","Meta","title","className","styles","receiptStatus","layout","input","placeholder","prefix","icon","style","color","onChange","es_button","bordered","dataSource","renderItem","locale","emptyText","extra","TextArea","rows","disabled","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.235e6382.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3vKT_\",\"header\":\"App_header__2akJb\",\"content\":\"App_content__11epw\",\"inputGroup\":\"App_inputGroup__2h8l0\",\"username\":\"App_username__2fe8C\",\"email\":\"App_email__3pwHp\",\"receiptList\":\"App_receiptList__3rM5M\",\"text\":\"App_text__1UFpU\",\"btnGroup\":\"App_btnGroup__3AU1K\",\"sendBtn\":\"App_sendBtn__3cFdR\",\"clearBtn\":\"App_clearBtn__3l0Vx\",\"footer\":\"App_footer__36omy\"};","import React, { Component } from 'react';\nimport { Layout, List, Icon, Input, Button, message, notification } from 'antd';\n\nimport styles from './App.module.scss';\n\nconst { Header, Content, Footer } = Layout;\nconst API_URL = 'https://email-sender-api.herokuapp.com/api/sendEmail';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      receipts: [],\n      username: '',\n      email: '',\n      message: '',\n      loading: false\n    };\n  }\n\n  openNotificationWithIcon = (type, user) => {\n    let message = type === 'success' ? 'Success' : 'Error';\n    let description = type === 'success' ?\n      `Email to ${user.username} is sent successfully!` :\n      `Email to ${user.username} is not sent successfully!`;\n\n    notification[type]({\n      message,\n      description,\n    });\n  };\n\n  validateFields = () => {\n    /*eslint-disable */\n    const regEx = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    /*eslint-enable */\n    let { username, email } = this.state;\n    if (!username) {\n      message.error('Username can\\'t be empty');\n      return false;\n    }\n    if (!email || !regEx.test(email)) {\n      message.error('Invalid Email');\n      return false;\n    }\n    return true;\n  }\n\n  handleInputChange = (key) => (e) => {\n    this.setState({\n      [key]: e.target.value\n    });\n  }\n\n  handleAddClick = () => {\n    // input fields validation\n    this.setState({\n      username: '',\n      email: ''\n    });\n    if (!this.validateFields()) {\n      return;\n    }\n\n    let { receipts, username, email } = this.state;\n    receipts.push({\n      username,\n      email,\n      status: ''\n    });\n    this.setState({ receipts });\n  }\n\n  handleRemoveReceipt = (index) => () => {\n    let { receipts } = this.state;\n    receipts.splice(index, 1);\n    this.setState({ receipts });\n  }\n\n  handleSendSubmit = () => {\n    let { receipts } = this.state;\n    receipts = receipts.map(item => {\n      item.status = 'SENDING';\n      return item;\n    });\n    this.setState({ loading: !this.state.loading, receipts });\n\n    fetch(API_URL,\n      {\n        method: 'post',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ receipts: this.state.receipts, message: this.state.message })\n      })\n      .then(response => response.json())\n      .then(({ data }) => {\n        data.map((item, index) => {\n          let { receipts } = this.state;\n          if (item[0].statusCode === 202) {\n            receipts[index].status = 'DELIVERED';\n            this.openNotificationWithIcon('success', this.state.receipts[index]);\n          } else {\n            receipts[index].status = 'FAILED';\n            this.openNotificationWithIcon('error', this.state.receipts[index]);\n          }\n          this.setState({ receipts, loading: false });\n        });\n      })\n      .catch(error => {\n        message.error(error.message);\n        this.setState({ loading: false });\n      });\n  }\n\n  handleClearSubmit = () => {\n    this.setState({\n      username: '',\n      email: '',\n      receipts: [],\n      message: ''\n    });\n  }\n\n  renderReceipt = (item, index) => (\n    <List.Item actions={[<a key={index} onClick={this.handleRemoveReceipt(index)}>Remove</a>]}>\n      <List.Item.Meta title={item.username} description={item.email} />\n      {item.status ? (\n        <div className={styles.receiptStatus}>\n          {item.status}\n        </div>\n      ) :\n        <div />\n      }\n    </List.Item>\n  )\n\n  render() {\n    return (\n      <Layout className={styles.App}>\n        <Header className={styles.header}>\n          <h1> Email Sender</h1>\n        </Header>\n        <Content className={styles.content}>\n          <div className={styles.inputGroup}>\n            <Input\n              className={styles.username}\n              placeholder='Type Receipt Name here'\n              prefix={<Icon type='user' style={{ color: 'rgba(0,0,0,.25)' }} />}\n              value={this.state.username}\n              onChange={this.handleInputChange('username')}\n            />\n            <Input\n              className={styles.email}\n              placeholder='Type Receipt Email here'\n              prefix={<Icon type='mail' style={{ color: 'rgba(0,0,0,.25)' }} />}\n              value={this.state.email}\n              onChange={this.handleInputChange('email')}\n            />\n            <Button type='primary' onClick={this.handleAddClick}>Add to list</Button>\n          </div>\n          <List\n            className={styles.receiptList}\n            header={<h2>Receipts</h2>}\n            bordered\n            dataSource={this.state.receipts}\n            renderItem={this.renderReceipt}\n            locale={{ emptyText: 'No Receipts' }}\n            extra={this.state.receipts}\n          />\n          <Input.TextArea\n            rows={5}\n            placeholder='Type message here...'\n            className={styles.text}\n            value={this.state.message}\n            onChange={this.handleInputChange('message')}\n          />\n          <div className={styles.btnGroup}>\n            <Button\n              type='primary'\n              disabled={!this.state.receipts.length || !this.state.message || this.state.loading}\n              loading={this.state.loading}\n              className={styles.sendBtn}\n              onClick={this.handleSendSubmit}\n            >\n              Send\n            </Button>\n            <Button\n              type='danger'\n              className={styles.clearBtn}\n              onClick={this.handleClearSubmit}\n            >\n              Clear\n            </Button>\n          </div>\n        </Content>\n        <Footer className={styles.footer}>\n          Email Sender Test Project @2018\n        </Footer>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}